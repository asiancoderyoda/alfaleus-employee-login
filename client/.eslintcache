[{"D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\index.js":"1","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\App.js":"2","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\reducers\\userReducer.js":"3","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\components\\Navbar.js":"4","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\screens\\Login.js":"5","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\screens\\Register.js":"6","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\screens\\Home.js":"7","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\screens\\Admin.js":"8"},{"size":202,"mtime":1609497830685,"results":"9","hashOfConfig":"10"},{"size":1518,"mtime":1609685853200,"results":"11","hashOfConfig":"10"},{"size":231,"mtime":1609593756662,"results":"12","hashOfConfig":"10"},{"size":3823,"mtime":1609684902539,"results":"13","hashOfConfig":"10"},{"size":3701,"mtime":1609679291790,"results":"14","hashOfConfig":"10"},{"size":4651,"mtime":1609670612948,"results":"15","hashOfConfig":"10"},{"size":206,"mtime":1609685673143,"results":"16","hashOfConfig":"10"},{"size":647,"mtime":1609704198696,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"23nbu4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\index.js",[],["40","41"],"D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\App.js",["42","43"],"import React, { useEffect, createContext, useReducer, useContext } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter, Route, Switch, useHistory } from \"react-router-dom\";\nimport Login from \"./screens/Login\";\nimport Register from \"./screens/Register\";\nimport { reducer, initialState } from \"./reducers/userReducer.js\";\nimport Home from \"./screens/Home\";\nimport Admin from \"./screens/Admin\";\n\n\nexport const UserContext = createContext();\n\n\nconst Routing = () => {\n  const history = useHistory();\n  const {state, dispatch} = useContext(UserContext)\n  \n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n\n    if(user){\n      dispatch({type:'USER',payload:user})\n    }else{\n      if(!history.location.pathname.startsWith(\"/reset\")){\n        history.push('/login')\n      }\n    }\n  },[])\n\n\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route exact path=\"/login\">\n        <Login />\n      </Route>\n      <Route exact path=\"/register\">\n        <Register />\n      </Route>\n      <Route exact path=\"/admin\">\n        <Admin />\n      </Route>\n    </Switch>\n  );\n};\n\n\n\n\nfunction App() {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div className=\"App\">\n      <UserContext.Provider value={{state:state, dispatch}}>\n        <BrowserRouter>\n          <Navbar />\n          <Routing />\n        </BrowserRouter>\n      </UserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\reducers\\userReducer.js",[],"D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\components\\Navbar.js",[],"D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\screens\\Login.js",["44","45"],"import React, {useState, useContext} from 'react';\r\nimport './Login.css';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport {UserContext} from '../App'\r\n\r\n\r\ntoast.configure()\r\nconst Login = () => {\r\n\r\n\r\n    const {state, dispatch} = useContext(UserContext)\r\n\r\n  const history = useHistory()\r\n  const[empid, setEmpId]= useState(\"\")\r\n  const[password,setPassword]= useState(\"\")\r\n\r\n\r\n    const signin = () => {\r\n\r\n      fetch(\"/api/v1/signin\", {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\":\"application/json\"\r\n        },\r\n        body:JSON.stringify({\r\n          password:password,\r\n          employee_id:empid\r\n        })\r\n      }).then(res => res.json()).then(data => {\r\n        //console.log(data)\r\n        if(data.error){\r\n          toast.error(data.error, {position: toast.POSITION.TOP_CENTER})\r\n        } else{\r\n          /////////\r\n          localStorage.setItem('jwt', data.token)\r\n          localStorage.setItem(\"user\", JSON.stringify(data.user))\r\n          /////////\r\n          dispatch({type: \"USER\", payload:data.user})\r\n\r\n          toast.success(\"Signed in successfully\", {position: toast.POSITION.TOP_CENTER})\r\n          history.push('/')\r\n        }\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container-fluid\">\r\n            <div className=\"row no-gutter\">\r\n                <div className=\"d-none d-md-flex col-md-4 col-lg-6 bg-image\"></div>\r\n                <div className=\"col-md-8 col-lg-6\">\r\n                <div className=\"login d-flex align-items-center py-5\">\r\n                    <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-9 col-lg-8 mx-auto\">\r\n                        <h3 className=\"login-heading mb-4\">Welcome back!</h3>\r\n                        <form>\r\n\r\n                            <div className=\"form-label-group\">\r\n                            <input value={empid} onChange={(e) => setEmpId(e.target.value)} type=\"text\" id=\"inputEmpId\" className=\"form-control\" placeholder=\"Employee ID\"/>\r\n                            <label htmlFor=\"inputEmpId\">Employee ID</label>\r\n                            </div>\r\n\r\n                            <div className=\"form-label-group\">\r\n                            <input value={password} onChange={(e) => setPassword(e.target.value)} type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\"/>\r\n                            <label htmlFor=\"inputPassword\">Password</label>\r\n                            </div>\r\n                    \r\n                        </form>\r\n\r\n                            <button onClick={signin} id=\"signin__button\" className=\"btn btn-lg btn-block btn-login text-uppercase font-weight-bold mb-2\" type=\"submit\">Sign in</button>\r\n                            <div className=\"text-center\">\r\n                            <a className=\"small\" href=\"#\">Forgot password?</a>\r\n                            <p style={{marginTop:\"10px\",fontSize:\"16px\",fontWeight:\"400\"}}>\r\n                            New Emplyoee?\r\n                            <Link to={\"/register\"} style={{ textDecoration: \"none\" }}>\r\n                            <span className=\"login__register\"> Register here</span>\r\n                            </Link>\r\n                            </p>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\screens\\Register.js",["46","47"],"import React, {useState} from \"react\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\ntoast.configure()\r\nconst Register = () => {\r\n\r\n    const history = useHistory()\r\n    const[name, setName]= useState(\"\")\r\n    const[email, setEmail]= useState(\"\")\r\n    const[password,setPassword]= useState(\"\")\r\n\r\n    const[confirmpassword,setConfirmPassword]= useState(\"\")\r\n\r\n\r\n\r\n    const signup = (e) => {\r\n\r\n        if(!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)){\r\n          return toast.error(\"Invalid email\", {position: toast.POSITION.TOP_CENTER})\r\n        }\r\n        if(password !== confirmpassword){\r\n            return toast.error(\"Passwords dont match. Recheck password\", {position: toast.POSITION.TOP_CENTER})\r\n        }\r\n    \r\n        fetch(\"/api/v1/signup\", {\r\n          method: \"post\",\r\n          headers: {\r\n            \"Content-Type\":\"application/json\"\r\n          },\r\n          body:JSON.stringify({\r\n            name:name,\r\n            password:password,\r\n            email:email,\r\n          })\r\n        }).then(res => res.json()).then(data => {\r\n          if(data.error){\r\n            toast.error(data.error, {position: toast.POSITION.TOP_CENTER})\r\n          } else{\r\n            toast.success(data.message, {position: toast.POSITION.TOP_CENTER})\r\n            history.push('/login')\r\n          }\r\n        }).catch(err => {\r\n          console.log(err)\r\n        })\r\n      }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container-fluid\">\r\n            <div className=\"row no-gutter\">\r\n                <div className=\"d-none d-md-flex col-md-4 col-lg-6 bg-image\"></div>\r\n                <div className=\"col-md-8 col-lg-6\">\r\n                <div className=\"login d-flex align-items-center py-5\">\r\n                    <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-9 col-lg-8 mx-auto\">\r\n                        <h3 className=\"login-heading mb-4\">Register Here!</h3>\r\n                        <form>\r\n                            <div className=\"form-label-group\">\r\n                            <input value={email} onChange={(e) => setEmail(e.target.value)} type=\"text\" id=\"inputEmail\" className=\"form-control\" placeholder=\"Email ID\"/>\r\n                            <label htmlFor=\"inputEmail\">Email ID</label>\r\n                            </div>\r\n\r\n                            <div className=\"form-label-group\">\r\n                            <input value={name} onChange={(e) => setName(e.target.value)} type=\"text\" id=\"inputName\" className=\"form-control\" placeholder=\"Full Name\"/>\r\n                            <label htmlFor=\"inputName\">Full Name</label>\r\n                            </div>\r\n\r\n                            <div className=\"form-label-group\">\r\n                            <input value={password} onChange={(e) => setPassword(e.target.value)} type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\"/>\r\n                            <label htmlFor=\"inputPassword\">Password</label>\r\n                            </div>\r\n\r\n                            <div className=\"form-label-group\">\r\n                            <input value={confirmpassword} onChange={(e) => setConfirmPassword(e.target.value)} type=\"password\" id=\"confirmPassword\" className=\"form-control\" placeholder=\"Confirm Password\"/>\r\n                            <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                            </div>\r\n                        \r\n                            \r\n                            \r\n                        </form>\r\n                        <button onClick={signup} id=\"signin__button\" className=\"btn btn-lg btn-block btn-login text-uppercase font-weight-bold mb-2\" type=\"submit\">Register</button>\r\n                        <div className=\"text-center\">\r\n                            <p style={{marginTop:\"10px\",fontSize:\"16px\",fontWeight:\"400\"}}>\r\n                            Already a Emplyoee?\r\n                            <Link to={\"/login\"} style={{ textDecoration: \"none\" }}>\r\n                            <span className=\"login__register\"> Login here</span>\r\n                            </Link>\r\n                            </p>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n",["48","49"],"D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\screens\\Home.js",[],"D:\\Alfaleus\\alfaleus-project\\server\\client\\src\\screens\\Admin.js",["50","51"],"import React, {useContext} from 'react';\r\nimport \"./Admin.css\";\r\nimport {UserContext} from '../App'\r\n\r\nconst Admin = () => {\r\n\r\n    const {state, dispatch} = useContext(UserContext)\r\n    console.log(state);\r\n\r\n    const length = state ? state.employee_id.length : \"Loading\"\r\n    const emp__id = state ?  state.employee_id.replace(/\\d+/,\"*\") : \"Loading\"\r\n\r\n    return (\r\n        <div className=\"admin container\">\r\n            <h1>Welcome {emp__id}</h1>\r\n\r\n            <h6>Employee Name: {state ? state.name : \"Loading\"}</h6>\r\n            <h6>Employee Email: {state ? state.email : \"Loading\"}</h6>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin\r\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":17,"column":10,"nodeType":"58","messageId":"59","endLine":17,"endColumn":15},{"ruleId":"60","severity":1,"message":"61","line":29,"column":5,"nodeType":"62","endLine":29,"endColumn":7,"suggestions":"63"},{"ruleId":"56","severity":1,"message":"57","line":13,"column":12,"nodeType":"58","messageId":"59","endLine":13,"endColumn":17},{"ruleId":"64","severity":1,"message":"65","line":79,"column":29,"nodeType":"66","endLine":79,"endColumn":59},{"ruleId":"67","severity":1,"message":"68","line":21,"column":23,"nodeType":"69","messageId":"70","endLine":21,"endColumn":24,"suggestions":"71"},{"ruleId":"67","severity":1,"message":"68","line":21,"column":48,"nodeType":"69","messageId":"70","endLine":21,"endColumn":49,"suggestions":"72"},{"ruleId":"52","replacedBy":"73"},{"ruleId":"54","replacedBy":"74"},{"ruleId":"56","severity":1,"message":"75","line":7,"column":19,"nodeType":"58","messageId":"59","endLine":7,"endColumn":27},{"ruleId":"56","severity":1,"message":"76","line":10,"column":11,"nodeType":"58","messageId":"59","endLine":10,"endColumn":17},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["79"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["80","81"],["82","83"],["77"],["78"],"'dispatch' is assigned a value but never used.","'length' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"messageId":"86","fix":"87","desc":"88"},{"messageId":"89","fix":"90","desc":"91"},{"messageId":"86","fix":"92","desc":"88"},{"messageId":"89","fix":"93","desc":"91"},"Update the dependencies array to be: [dispatch, history]",{"range":"94","text":"95"},"removeEscape",{"range":"96","text":"97"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"98","text":"99"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"100","text":"97"},{"range":"101","text":"99"},[853,855],"[dispatch, history]",[516,517],"",[516,516],"\\",[541,542],[541,541]]